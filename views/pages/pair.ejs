<!DOCTYPE html>
<html>
<head>
  <%- include ("../partials/header.ejs") %>

  <style>
    html, body {
      height: 100%;
    }

    body {
      display: -ms-flexbox;
      display: -webkit-box;
      display: flex;
      -ms-flex-align: center;
      -ms-flex-pack: center;
      -webkit-box-align: center;
      align-items: center;
      -webkit-box-pack: center;
      justify-content: center;
      padding-top: 40px;
      padding-bottom: 40px;
      background-color: #f5f5f5;
    }

    .form-pair {
      width: 100%;
      max-width: 330px;
      padding: 15px;
      margin: 0 auto;
    }

    .form-pair .checkbox {
      font-weight: 400;
    }

    .form-pair .form-control {
      position: relative;
      box-sizing: border-box;
      height: auto;
      padding: 10px;
      font-size: 16px;
    }

    .form-pair .form-control:focus {
      z-index: 2;
    }

    #inputId {
      margin-bottom: 0px;
      border-bottom-right-radius: 0;
      border-bottom-left-radius: 0;
    }

    #inputName {
      margin-bottom: 10px;
      border-top-left-radius: 0;
      border-top-right-radius: 0;
    }

    .pair-alert {
        display: block;
        left: 0;
        margin: auto;
        text-align: center;
        width: 80%;
        z-index: 1;
        position: absolute;
        right: 0;
        bottom: 40px;
    }

    .id-device-indicator {
        /*border-color: #dc3545;*/
        padding-right: calc(1.5em + .75rem);
        background-repeat: no-repeat;
        background-position: right calc(.375em + .1875rem) center;
        background-size: calc(.75em + .375rem) calc(.75em + .375rem);
    }

    
  </style>
</head>

<body class="text-center">

  <%- include ("../partials/nav.ejs") %>

    <form id="pair-form" class="form-pair">
      <h1 class="h3 mb-3 font-weight-normal">Pair new device</h1>
      <label for="inputId" class="sr-only">Pair ID</label>
      <input type="text" id="inputId" class="form-control id-device-indicator device-online" placeholder="ID" required="" autofocus="" autocomplete="off">
     
      <label for="inputName" class="sr-only">Friendly Name</label>
      <input type="text" id="inputName" class="form-control" placeholder="Name" required="" autocomplete="off">
      <button class="btn btn-lg btn-primary btn-block" type="submit">Pair</button>
    </form>

    <div id="pair-success-alert" class="alert alert-success center-block pair-alert" role="alert" style="display: none;">
        Successfully paired device. <a id="success-alert-link" href="/device?id=" class="alert-link">Connect</a>
        <button type="button" class="close" onclick="closeAlerts()">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>

    <div id="pair-fail-alert" class="alert alert-danger center-block pair-alert" role="alert" style="display: none;">
        Failed to pair device
        <button type="button" class="close" onclick="closeAlerts()">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>

    <script type="text/javascript" src="/js/utils.js"></script>
    <script src="https://cdn.socket.io/4.5.0/socket.io.min.js" integrity="sha384-7EyYLQZgWBi67fBtVxw60/OWl1kjsfrPFcaU0pp0nAh+i8FD068QogUvg85Ewy1k" crossorigin="anonymous"></script>
    <script>
        var socket = io();

        // unused
        function success(deviceName) {
            $('#pair-fail-alert').fadeOut();
            $('#pair-success-alert').fadeIn();

            $('#success-alert-link').attr("href", `/device?name=${encodeURIComponent(deviceName)}`);
        }

        function fail(msg) {
            $('#pair-success-alert').fadeOut();
            $('#pair-fail-alert').fadeIn();

            $('#pair-fail-alert').html(`Failed to pair device - '${msg}' <button type="button" class="close" onclick="closeAlerts()"><span aria-hidden="true">&times;</span></button>`);
        }

        function closeAlerts(){
            $('#pair-success-alert').fadeOut();
            $('#pair-fail-alert').fadeOut();
        }

        function lerp(a, b, t) {
            if(t >=1) {return b;}
            if(t <=0) {return a;}
            return a + (b - a) * t;
        }

        function colorIndicator(online, alpha){
            let redColor = [218, 98, 85];
            let greenColor = [136, 213, 112];

            console.log(alpha);

            let colorV=[0,0,0];
            colorV[0] = lerp(redColor[0], greenColor[0], alpha);
            colorV[1] = lerp(redColor[1], greenColor[1], alpha);
            colorV[2] = lerp(redColor[2], greenColor[2], alpha);

            let color = `${colorV[0]}, ${colorV[1]}, ${colorV[2]}`;

            let svg = `data:image/svg+xml,%3Csvg viewBox='0 0 12 12' xmlns='http://www.w3.org/2000/svg' xmlns:bx='https://boxy-svg.com'%3E%3Cdefs%3E%3Cbx:grid x='0' y='0' width='12' height='12'/%3E%3C/defs%3E%3Cellipse style='stroke: rgba(0, 0, 0, 0); paint-order: fill; fill: rgb(${color});' cx='6' cy='6' rx='6' ry='6'/%3E%3C/svg%3E`;
            $('#inputId').css("background-image", `url("${svg}")`);
        }

        let frame = 0;
        let animId = 0;
        let totalFrames = 500;
        function animateIndicatorFrame(show){
            let alpha = frame / totalFrames;
            if(!show) {alpha = 1-alpha;}
            colorIndicator(alpha);
            frame++;
            if(frame > totalFrames){
                clearInterval(animId);
                animId = 0;
            }
        }

        function animateIndicator(show){
            if(animId > 0){clearInterval(animId);}
            frame = 0;
            animId = setInterval(function() {animateIndicatorFrame(show);}, 1);
        }

        close();

        function processForm(e) {
            if (e.preventDefault) e.preventDefault();

            var id = $('#inputId').val();
            var name = $('#inputName').val();

            if(!stringValidation(id) || id == "") {fail("Id is not valid. (None of these characters '<>,.\"';:{}%$=+`' are allowed)"); return false;}
            if(!stringValidation(name) || name == "") {fail("Name is not valid. (None of these characters '<>,.\"';:{}%$=+`' are allowed)"); return false;}

            if(localStorage.getItem("device-list") != null){
                const devices = JSON.parse(localStorage.getItem("device-list"));
                let i = 0;
                let found = -1;
                devices.forEach(listing => {
                    if (listing.name == name) {
                        found = i;
                    }
                    i++;
                });
                if (found > -1){
                    fail("Name is already used."); return false;
                }

                found = -1;
                devices.forEach(listing => {
                    if (listing.id == id) {
                        found = i;
                    }
                    i++;
                });
                if (found > -1){
                    fail("Id is already paired."); return false;
                }
            }

            socket.emit("isDeviceConnected", id, (connected) => {
                if(connected){
                    if(localStorage.getItem("device-list") != null){
                        const devices = JSON.parse(localStorage.getItem("device-list"));
                        devices.push({name:name,id:id});
                        localStorage.setItem("device-list", JSON.stringify(devices));
                        window.location.href = "/device?name=" + encodeURIComponent(name);
                    }
                } else {
                    fail("Device is not connected.");
                }
            });

            return false;
        }

        socket.on("connect", () => {
            $('#pair-form').on('submit', processForm);
        });
    </script>

</body>
</html>
