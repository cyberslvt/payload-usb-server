<!DOCTYPE html>
<html>
<head>
  <%- include ("../partials/header.ejs") %>

  <style>
    .hidden-scaled {
      max-height: 0;
      margin-top: 0;
      margin-bottom: 0;
      padding-top: 0;
      padding-bottom: 0;
      opacity: 0;
      transition: opacity 0.5s ease, max-height 0.5s ease, margin-top 0.5s ease, margin-bottom 0.5s ease, padding-top 0.5s ease, padding-bottom 0.5s ease;
    }

    .visible-scaled {
      max-height: 1000px;
      opacity: 1;
      transition: opacity 0.5s ease, max-height 0.5s ease, margin-top 0.5s ease, margin-bottom 0.5s ease, padding-top 0.5s ease, padding-bottom 0.5s ease;
    }
  </style>

</head>

<body>

  <%- include ("../partials/nav.ejs") %>

  <main role="main" id="device-wrapper" class="container hidden-scaled">
    <div id="device-title-wrapper" class="my-3 p-3 bg-white rounded box-shadow">
      <h6 class="border-bottom border-gray pb-2 mb-0" id="device-title">Test Device</h6>
      <div class="pt-3"></div>
      <div id="device-data-container" class="container">

      </div>
    </div>
  </main>

  <div id="connection-title" class="d-flex justify-content-center align-items-center hidden" style="height:50px;margin-top:50px;">
    <h3 id="connection-title-text">Waiting for connection from ''</h2>
  </div>
  <div id="connection-spinner" class="d-flex justify-content-center align-items-center hidden" style="height:50px;">
    <div class="spinner-border text-dark" role="status"></div> 
  </div>

  <script src="https://cdn.socket.io/4.5.0/socket.io.min.js" integrity="sha384-7EyYLQZgWBi67fBtVxw60/OWl1kjsfrPFcaU0pp0nAh+i8FD068QogUvg85Ewy1k" crossorigin="anonymous"></script>
  <script>
    x = {
      cInternal: false,
      cListener: function(val) {},
      set connected(val) {
        this.cInternal = val;
        this.cListener(val);
      },
      get connected() {
        return this.cInternal;
      },
      registerListener: function(listener) {
        this.cListener = listener;
      }
    }

    // -- DEVICE DATA POPULATION --
    function generateData(){
      let html = `
        <button type="button" class="btn btn-dark">Toggle LED</button>
      `;
      $(html).appendTo($('#device-data-container'));
    }


    function clearData() {
      $('#device-data-container').empty();
    }
    // -- DEVICE DATA POPULATION --

    function showDevice(show){
      let rem = 'hidden';
      let add = 'visible';
      if(show) {rem = 'visible'; add = 'hidden';}
      $('#connection-title').removeClass(rem);
      $('#connection-title').addClass(add);
      $('#connection-spinner').removeClass(rem);
      $('#connection-spinner').addClass(add);
      $('#device-wrapper, #device-title-wrapper, #device-title').removeClass(add+"-scaled");
      $('#device-wrapper, #device-title-wrapper, #device-title').addClass(rem+"-scaled");

      if(show){
        generateData();
      } else {
        clearData();
      }
    }

    var socket = io();
    socket.on("connect", () => {
      var targetId = "";

      showDevice(false);

      // -- QUERY VALIDATION --
      var query = JSON.parse('<%- JSON.stringify(req.query) %>');
      if(query.name != null) {
        $('#connection-title-text').text(`Waiting for connection from '${query.name}'`);
        if(localStorage.getItem("device-list") != null){
          const devices = JSON.parse(localStorage.getItem("device-list"));
          let i = 0;
          let found = -1;
          devices.forEach(listing => {
            if (listing.name == query.name) {
              found = i;
            }
            i++;
          });
          if (found > -1){
            targetId = devices[found].id;
            socket.emit("registerListen", targetId);
            console.log("Registered listen");
          } else {
            console.log("Did not find paired device with name: '" + query.name + "'");
          }
        }
      } else {
        console.log("Name not in query.");
      }
      // -- QUERY VALIDATION --

      // -- EVENT BINDING --
      if(targetId != ""){
        socket.on('deviceConnected', function() {x.connected = true;});
        socket.on('deviceLost', function() {x.connected = false;});

        socket.emit("isDeviceConnected", targetId, function(val) {
          console.log("Recieved: " + val);
          x.connected = val;
        });
      } else {
        document.location.href = "/";
      }

      x.registerListener(function(val) {
        console.log("Connected: " + val);
        showDevice(val);
      });
      // -- EVENT BINDING --
     });
  </script>

</body>
</html>
